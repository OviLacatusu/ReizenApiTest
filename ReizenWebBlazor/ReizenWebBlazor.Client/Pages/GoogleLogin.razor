@using Reizen.Domain.Models;
@using global::GoogleAccess.Domain.Models
@using Microsoft.AspNetCore.WebUtilities;
@using global::GoogleAccess.Domain.models

@page "/GoogleLogin"

@rendermode InteractiveServer

@inject IHttpClientFactory _factory;
@inject NavigationManager _navManager;
@* @inject GoogleAuthService _service; *@

@* <GoogleAccess _OnAuthCodeReceived="HandleCode" /> *@

<a class="btn-link" href="@link">Authorize</a>
<p>@(code)</p>
<p>@(accessToken) xxx</p>

@if(HasAccessToken)
{
    if (PickerSessionData is not null)
    {
        <a href="@PickerSessionData.pickerUri">Pick Files</a>
        StateHasChanged();
    }

    else {
        PickerSessionData = GetListPhotos().Result;
    }
}
else
{
    <p>Waiting for data...</p>
}

@code {
    private PickingSession? PickerSessionData { get; set; }
    private bool HasAccessToken { get; set; } = false;

    private string? code { get; set; }

    private string? accessToken { get; set; }

    private string? link;

    private async Task HandleCode()
    {
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        if (code is null)
        {
            if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("code", out var result))
            {
                code = Convert.ToString(result);
                var client = _factory.CreateClient();

                var response = (await client.GetStringAsync($"api/Test/HandleCallback?code={code}"));

                if (bool.TryParse(response, out var test)) {
                    HasAccessToken = test;
                }
                //     AuthResponse response = await _service.ExchangeAuthorizationCodeAsync(code);

                //     accessToken = response.AccessToken;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        link = await GetLink();
        
        await HandleCode();
    }
    private async Task<string?> GetLink() 
    {
        var client = _factory.CreateClient();
        return (await client.GetFromJsonAsync<IndexViewModel>("/api/Test/getauthlink"))?.Uri.ToString();
    }

    private async Task<PickingSession?> GetListPhotos() 
    {
        var client = _factory.CreateClient();
        var result = (await client.GetFromJsonAsync<PickingSession>("/api/Test/GetPickerLink"));

        return result;
    }

}
