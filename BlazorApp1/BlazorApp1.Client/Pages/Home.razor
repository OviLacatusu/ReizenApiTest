@using Microsoft.AspNetCore.Authorization
@using Reizen.Domain.DTOs

@page "/Home"

@inject IHttpClientFactory _httpFactory
@inject ILogger<Home> _logger;

@rendermode InteractiveServer

@attribute [Authorize]
<AuthorizeView>
    <div class="container">
    <PageTitle>Werelddelen</PageTitle>

    <h1>Choose the continent</h1>
    @if(werelddelen != null)
    {
        <ul>
            @foreach (var werelddeel in werelddelen)   
            {
                @* _logger.LogInformation(context?.User?.Identity?.Name); *@
                <li><a href="/werelddelen/@werelddeel.Naam">@werelddeel.Naam  </a></li>
            }
        </ul>
    } 
    else 
    {
        <p>Waiting for data...</p>
    }
    @if(Error != null)
    {
        <div class="alert alert-danger">@Error</div>
    }
    </div>
</AuthorizeView> 
@code 
{
    private string Error { get; set; }

    private IEnumerable<WerelddeelDTO>? werelddelen;

    protected override async Task OnInitializedAsync( )
    {
        using var httpClient = _httpFactory.CreateClient();
        {
            var result = await httpClient.GetAsync("api/werelddelen");
            if (result.IsSuccessStatusCode)
            {
                werelddelen = await result.Content.ReadFromJsonAsync<IEnumerable<WerelddeelDTO>>();
            }
            else 
            {
                var content = await result.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
                else {
                    Error = "Something went wrong.";
                }
            }
        }
            
        
    }
}