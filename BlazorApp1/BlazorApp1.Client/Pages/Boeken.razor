@using Microsoft.AspNetCore.Authorization
@using Reizen.Data.Models
@using System.Text.Json;
@using Reizen.Domain.DTOs
@using System.Text

@page "/boeken/{ReisId:int}/{KlantId:int}"

@inject ILogger<Boeken> _logger;
@inject IHttpClientFactory _httpFactory

@rendermode InteractiveServer

<div class="container">
    @if (Reis is not null && Klant is not null)
    {
    <h2>Reis</h2>
    <div class="row">

        <div class="col-lg-3">   
            <p style="font:bold">Bestemming:</p>
        </div>
        <div class="col-lg-1">
            <p>@Reis.Bestemming.Plaats</p>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3">
            <p style="font:bold">Vertrek:</p>
        </div>
        <div class="col-lg-1"> 
            <p>@Reis.Vertrek</p>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3">
            <p style="font:bold">Aantal dagen:</p>
        </div>
        <div class="col-lg-1">
            <p>@Reis.AantalDagen</p>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3">
            <p style="font:bold">Prijs per persoon:</p>
        </div>
        <div class="col-lg-1">
            <p>@Reis.PrijsPerPersoon</p>
        </div>
    </div>

    <h2>Klant</h2>
    <div class="row">
        <div class="col-lg-3">
            <p>@($"{Klant.Voornaam} {Klant.Familienaam}")</p>
        </div>
        <div class="col-lg-1">
            <p>@Klant.Adres</p>
        </div>
    </div>
    <h2>Boeking</h2>

    <div class="row">
            <div class="col-lg-3">
                <label for="aantalV">Aantal volwassenen</label>
            </div>
        <div class="col-lg-1">
            <InputNumber @bind-Value:get="(Boeking.AantalVolwassenen)" @bind-Value:set="((value) => Boeking.AantalVolwassenen=value)" id="aantalV"></InputNumber>
        </div>
    </div>
    <div class="row">
            <div class="col-lg-3">
                <label for="aantalK">Aantal kinderen</label>
            </div>
            <div class="col-lg-1">
                <InputNumber @bind-Value:get="(Boeking.AantalKinderen)" @bind-Value:set="((value)=>{Boeking.AantalKinderen=value;})" id="aantalK"></InputNumber>
            </div>
    </div>
    <div class="row">
            <div class="col-lg-3">
                <label>Annulatie verzekering</label>
            </div>
            <div class="col-lg-1">
                <InputCheckbox id="annulatieV" @bind-Value="@Boeking.AnnulatieVerzekering"></InputCheckbox>
            </div>
    </div>

    <div class="row">
        <div class="col-lg-3">

        </div>
            <div class="col-lg-1">
                <button class="btn btn-primary" @onclick="AddNewBooking">Boeken</button>
            </div>
        
    </div>
  
    } else 
    {
        <p>Waiting for data</p>
    }
    @if (Error != null)
    {
        <div class="alert alert-danger">@Error</div>
    } else if (IsSuccessful)
    {
        <div class="alert alert-success">Booking successful</div>
    }
</div>

@code 
{
    [Parameter]
    public int ReisId { get; init; }

    [Parameter]
    public int KlantId { get; init; }

    private KlantDTO? Klant { get; set; }

    private ReisDTO? Reis { get; set; }

    private BoekingDTO? Boeking { get; set; } = new BoekingDTO { AantalKinderen = 0, AantalVolwassenen = 0, AnnulatieVerzekering = false };

    private string Error { get; set; }

    private bool IsSuccessful { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (ReisId > 0) 
        {
            using (var httpClient = _httpFactory.CreateClient()) 
            {
                var result = await httpClient.GetAsync($"/api/reizen/{ReisId}");
                
                if (result.IsSuccessStatusCode)
                {
                    Reis = await result.Content.ReadFromJsonAsync<ReisDTO>();
                }
                else 
                { 
                    var content = await result.Content.ReadAsStringAsync();
                    if (!String.IsNullOrEmpty(content))
                    {
                        Error = content;
                    }
                    else
                    {
                        Error = "Something went wrong.";
                    }
                }
            }
        }
        if (KlantId > 0 && Reis != null)
        { 
            using (var httpClient = _httpFactory.CreateClient()) 
            {
                var result = await httpClient.GetAsync($"/api/klanten/{KlantId}");
                if (result.IsSuccessStatusCode)
                {
                    Klant = await result.Content.ReadFromJsonAsync<KlantDTO>();
                }
                else
                {
                    var content = await result.Content.ReadAsStringAsync();
                    if (!String.IsNullOrEmpty(content))
                    {
                        Error = content;
                    }
                    else
                    {
                        Error = "Something went wrong.";
                    }
                }
            }
        }
    }

    private async Task AddNewBooking() 
    {
        Boeking.GeboektOp = DateOnly.FromDateTime(DateTime.Today);
        Boeking.Reisid = ReisId;
        Boeking.Klantid = KlantId;
        using (var client = _httpFactory.CreateClient()) 
        { 
            var httpContent = new StringContent(JsonSerializer.Serialize<BoekingDTO>(Boeking), Encoding.UTF8, "application/json");
            // POST request
            var response = await client.PostAsync($"/api/boekingen", httpContent);

            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
            }
            else {
                IsSuccessful = true;
            }
            StateHasChanged();
        }
    }
}
