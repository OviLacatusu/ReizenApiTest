@using Reizen.Domain.Models
@using Microsoft.AspNetCore.Authorization;
@using Reizen.Domain.DTOs

@page "/reisKiezen/{ReisId:int}"

@inject ILogger<ReisKiezen> _logger;
@inject IHttpClientFactory _httpFactory

@rendermode InteractiveServer

<div class="container">
    <h3>Boeken</h3>
    @if(Reis is not null)
    {
        <h4>Bestemming</h4>
        <p>@Reis.Bestemming?.Plaats</p>
        <h4>Vertrek</h4>
        <p>@Reis.Vertrek</p>
        <h4>Aantal dagen</h4>
        <p>@Reis.PrijsPerPersoon</p>
        <div >
            <label for="familienaam">Familienaam bevat:</label>
            <InputText @bind-value="familienaam" id="familienaam"></InputText>
            <button type="button" @onclick="(async () => await GetKlanten())" class="btn btn-primary">Zoek</button>
        </div>
    }else 
    { 
        <p>Waiting for data...</p>
    }
    @if(Error != null)
    {
        <div class="alert alert-danger">@Error</div>
    }
</div>
@if (klanten is not null) {
    <table class="table table-striped" >
        <thead>
            <tr>
                <th>Familienaam</th><th>Voornaam</th><th>Woonplaats</th><th>Boeken</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var klant in klanten)
            {
                <tr>
                    <td>@klant.Familienaam</td><td>@klant.Voornaam</td><td>@klant.Adres</td><td><a href="/boeken/@ReisId/@klant.Id">Boeken</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int ReisId { get; init; }

    private string? Error { get; set; }

    private ReisDTO? Reis { get; set; }

    private string? familienaam { get; set; }

    private IEnumerable<KlantDTO>? klanten;

    protected override async Task OnInitializedAsync() 
    {
        if (ReisId > 0) 
        {
            using var httpClient = _httpFactory.CreateClient();
            var result = await httpClient.GetAsync($"api/reizen/{ReisId}");

            if (result.IsSuccessStatusCode)
            {
                Reis = await result.Content.ReadFromJsonAsync<ReisDTO>();
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
                else
                {
                    Error = "Something went wrong.";
                }
            }
            
        }
    }

    private async Task GetKlanten() 
    {
        if (familienaam is not null)
        {
            using (var httpClient = _httpFactory.CreateClient())
            {
                var result = await httpClient.GetAsync($"api/klanten/{familienaam}");

                if (result.IsSuccessStatusCode)
                {
                    klanten = await result.Content.ReadFromJsonAsync<IEnumerable<KlantDTO>>();
                }
                else
                {
                    var content = await result.Content.ReadAsStringAsync();
                    if (!String.IsNullOrEmpty(content))
                    {
                        Error = content;
                    }
                    else
                    {
                        Error = "Something went wrong.";
                    }
                }
            }
        }
    }
}
