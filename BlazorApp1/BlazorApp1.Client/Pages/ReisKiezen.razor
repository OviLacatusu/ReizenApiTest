
@using Microsoft.AspNetCore.Authorization;
@using Reizen.CommonClasses.DTOs
@using Reizen.CommonClasses;

@page "/reisKiezen/{ReisId:int}"

@inject ILogger<ReisKiezen> _logger;
@inject IHttpClientFactory _httpFactory

@rendermode InteractiveServer

@* @attribute [Authorize] *@

<div class="container">
    <h2>Chosen trip:</h2>
    @if(Reis is not null)
    {
        <h4>Destination</h4>
        <p>@Reis.Bestemming?.Plaats</p>
        <h4>Departure date</h4>
        <p>@Reis.Vertrek</p>
        <h4>Number of days</h4>
        <p>@Reis.AantalDagen</p>
        <h4>Price</h4>
        <p>@Reis.PrijsPerPersoon</p>
        <div >
            <label for="Familienaam">Family name lookup:</label>
            <InputText @bind-value="Familienaam" id="Familienaam"></InputText>
            <button type="button" @onclick="(async () => await GetCustomers())" class="btn btn-primary">Zoek</button>
        </div>
    }
    else 
    { 
        <p>Waiting for data...</p>
    }
    @if (!String.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
</div>
@if (Klanten is not null) 
{
    <table class="table table-striped" >
        <thead>
            <tr>
                <th>Family name</th><th>First name</th><th>City of residence</th><th>Book Trip</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var klant in Klanten)
            {
                <tr>
                    <td>@klant.Familienaam</td><td>@klant.Voornaam</td><td>@klant.Adres</td><td><a href="/boeken/reis/@ReisId/klant/@klant.Id">Book trip</a></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int ReisId { get; init; }

    private string? Error { get; set; }

    private ReisDTO? Reis { get; set; }

    private string? Familienaam { get; set; }

    private IEnumerable<KlantDTO>? Klanten;

    protected override async Task OnInitializedAsync() 
    {
        if (ReisId > 0) 
        {
            using var httpClient = _httpFactory.CreateClient();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<ReisDTO>($"api/reizen/{ReisId}", httpClient);
            if (result.IsSuccessful)
            {
                Reis = result.Value;
            }
            else
            {
                Error = result.Error;
            }
        }
    }

    private async Task GetCustomers() 
    {
        if (!String.IsNullOrEmpty(Familienaam))
        {
            using (var httpClient = _httpFactory.CreateClient())
            {
                var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<KlantDTO>>($"api/klanten/{Familienaam}", httpClient);
                if (result.IsSuccessful)
                {
                    Klanten = result.Value;
                }
                else
                {
                    Error = result.Error;
                }
                //StateHasChanged();
            }
        }
    }
}
