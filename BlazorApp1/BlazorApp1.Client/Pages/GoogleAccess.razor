@using Reizen.Domain.Models
@using global::GoogleAccess.Domain.Models
@using Microsoft.AspNetCore.WebUtilities
@using System.Text.Json

@page "/GoogleAccessXX"

@rendermode @(new InteractiveServerRenderMode(prerender:false)) 

@inject ILogger<GoogleAccess> _logger;
@inject IHttpClientFactory _factory;
@inject NavigationManager _navManager;

@inject Blazored.SessionStorage.ISessionStorageService _storage; 

<GoogleAuthorization @bind-PickerSessionData="SessionData" @bind-AccessToken="AccessToken"></GoogleAuthorization>

@if(mediaItems is not null && mediaItems.mediaItems.Count() > 0)
{
    foreach (var item in mediaItems.mediaItems) 
    { 
        @* <a href="@($"{item.mediaFile.baseUrl}=w{item.mediaFile.mediaFileMetadata.width}-h{item.mediaFile.mediaFileMetadata.height}")">@item.mediaFile.filename</a> *@

        <a href="@($"{item.mediaFile.baseUrl}=d")">@item.mediaFile.filename</a>
    }
}

@code
{
    private CancellationToken token = new();

    [Parameter]
    public PickingSession? SessionData { get; set; }

    [Parameter]
    public string? AccessToken { get; set; }

    public DetailsFiles mediaItems { get; set; }

    protected override void OnInitialized()
    {
        _logger.LogInformation("-- OnInitialized called --");
    }
    protected override void OnParametersSet()
    {
        _logger.LogInformation("++ OnParametersSet called ++");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        _logger.LogInformation($"** OnAfterRender called with firstrender = {firstRender} **");

        if (!firstRender && SessionData != null) 
        {
            _logger.LogInformation($"  Setting background state to: {SessionData.pickerUri}  ");
            await PollRequest(SessionData.id);
        }
    }

    private async Task PollRequest(string id) {

        _logger.LogInformation($"Running PollRequest at {DateTime.UtcNow.ToShortTimeString()}");

        using (var client = _factory.CreateClient()) 
        {
            var response = await client.GetAsync($"api/Test/GetPhotosWithPicker/{id}");
            mediaItems = await JsonSerializer.DeserializeAsync<DetailsFiles>(await response.Content.ReadAsStreamAsync());
           
        }
        _logger.LogInformation($"Exiting PollRequest at {DateTime.UtcNow.ToShortTimeString()}");
        StateHasChanged();
    }
}