@using Reizen.CommonClasses.DTOs
@using Microsoft.AspNetCore.Authorization

@page "/{NameCountry}/Destinations"

@inject IHttpClientFactory _httpFactory
@inject ILogger<DestinationsOfCountry> _logger;

<div class="container">
    <h2>Choose the destination:</h2>

    <img src="/vlaggen/@(NameCountry).png" />

    @if (Destinations?.Count() > 0)
    {
        <ul>
            @foreach (var destination in Destinations)
            {
                <li>
                    <div class="row">
                        <div class="col col-md-2">
                            <a href="/@destination.Code/trips">@destination.PlaceName</a>
                        </div>
                        <div class="col col-md-3">
                            @if (TripsToDestination?[destination.Code]?.Count() > 0) 
                            {
                                <p> - @TripsToDestination[destination.Code].Count() available trips</p>
                            }
                            else 
                            {
                                <p> - no available trips</p>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Waiting for data...</p>
    }
    @if (!String.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
</div>

@code {
    [Parameter]
    public string? NameCountry { get; set; }

    private string? Error { get; set; }

    private IEnumerable<DestinationDTO>? Destinations;

    private IDictionary<string,IEnumerable<TripDTO>>? TripsToDestination = new Dictionary<string,IEnumerable<TripDTO>>();

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(NameCountry))
        {
            using var httpClient = _httpFactory.CreateClient();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<DestinationDTO>>($"api/Destinations/{NameCountry}", httpClient);
            if (result.IsSuccessful)
            {
                Destinations = result.Value;
                await GetAvailableTripsForEachDestination();
            }
            else
            {
                Error = result.Error;
            }
        }
    }
    private async Task GetAvailableTripsForEachDestination()
    {
        @if (Destinations?.Count() > 0)
        {
            foreach (var destination in Destinations)
            {
                using var httpClient = _httpFactory.CreateClient();

                var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<TripDTO>>($"api/Trips/{destination.Code}", httpClient);
                if (result.IsSuccessful)
                {
                    TripsToDestination.Add(destination.Code, result.Value);
                }
                else
                {
                    TripsToDestination.Add(destination.Code, null);
                    //Error += result.Error;
                }
            }
        }
    }
}
