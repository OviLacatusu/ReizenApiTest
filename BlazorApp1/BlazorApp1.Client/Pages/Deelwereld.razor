@using Reizen.Domain.DTOs
@using Microsoft.AspNetCore.Authorization

@page "/Werelddelen/{Naam}"

@inject IHttpClientFactory _httpFactory

@attribute [Authorize]

<h3>Landen</h3>
@if (Landen != null)
{
    <ul>
        @foreach (var land in Landen)
        {
            <li><a href="/landen/@land.Naam">@land.Naam </a></li>
        }
    </ul>
}
else
{
    <p>Waiting for data...</p>
}
@if (Error != null)
{
    <div class="alert alert-danger">@Error</div>
}
@code {
    [Parameter]
    public string? Naam { get; set; }

    private IEnumerable<LandDTO>? Landen;

    private string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"\tName continent is: {Naam}");
        if (!String.IsNullOrEmpty(Naam))
        {
            using var httpClient = _httpFactory.CreateClient();
            // var result = await httpClient.GetAsync($"api/landen/{Naam}");

            // if (result.IsSuccessStatusCode)
            // {
            //     Landen = await result.Content.ReadFromJsonAsync<IEnumerable<LandDTO>>();
            // }
            // else
            // {
            //     var content = await result.Content.ReadAsStringAsync();
            //     if (!String.IsNullOrEmpty(content))
            //     {
            //         Error = content;
            //     }
            //     else
            //     {
            //         Error = "Something went wrong.";
            //     }
            // }
            var result = await HelperRequest<IEnumerable<LandDTO>>.SendGetRequestAsync($"api/landen/{Naam}", httpClient);
            if (result.IsSuccessful)
            {
                Landen = result.Value;
            }
            else
            {
                Error = result.Error;
            }
        }
    }
}
