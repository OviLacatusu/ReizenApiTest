@page "/editCountries"
@using Microsoft.AspNetCore.Authorization

@inject ILogger<EditAvailableCountries> _logger;
@inject IHttpClientFactory _httpFactory;
@inject NavigationManager _navManager;

@* @attribute [Authorize] *@
<div class="container">
<h3>EditAvailableCountries</h3>

@if(Landen != null)
{
    foreach (var land in Landen)
    {
        <div class="row">
            <div class="col-lg-1">
                <label></label>
            </div>
            <div class="col-lg-3">
                <InputText @ref="@(Elements[land.Naam])"  @bind-Value:get="(land.Naam)" @bind-Value:set="((value) => {})"  ></InputText>
            </div>
            <div class="col-lg-1">
                <button class="btn btn-warning" @onclick="(() => ProcessEdit(land.Naam))">Edit</button>
            </div>
            <div class="col-lg-1">
                <button class="btn btn-danger">🗙</button>
            </div>
        </div>
    }
}
@if (!String.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@Error</div>
}
</div>
@code {
    private InputText CurrentText { get; set; }

    private Dictionary<string,InputText> Elements { get; set; } = new Dictionary<string, InputText>();


    private IEnumerable<LandDTO> Landen { get; set; }

    private string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetLands();
    }

    private async Task GetLands() 
    { 
        using var httpClient = _httpFactory.CreateClient();

        var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<LandDTO>>($"api/landen", httpClient);
        if (result.IsSuccessful)
        {
            Landen = result.Value;
        }
        else
        {
            Error = result.Error;
        }
    }

    private void ProcessEdit(string key) 
    {
        var input = Elements.GetValueOrDefault<string, InputText>(key);
        
    }
}
