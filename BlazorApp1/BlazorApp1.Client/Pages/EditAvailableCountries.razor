@page "/editCountries"

@inject ILogger<EditAvailableCountries> _logger;
@inject IHttpClientFactory _httpFactory;
@inject NavigationManager _navManager;

<h3>EditAvailableCountries</h3>

@if(Landen != null)
{
    foreach (var land in Landen)
    {
    <div class="row">
        <div class="col-lg-1">
            <label></label>
        </div>
        <div class="col-lg-3">
            <InputText @bind-Value:get="(land.Naam)" @bind-Value:set="((value) => {})" ></InputText>
        </div>
            <div class="col-lg-1">
                <button class="btn btn-warning">Edit</button>
            </div>
            <div class="col-lg-1">
                <button class="btn btn-danger">🗙</button>
            </div>
        </div>
    }
}
@if (!String.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@Error</div>
}

@code {
    private IEnumerable<LandDTO> Landen { get; set; }

    private string? Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetLands();
    }

    private async Task GetLands() 
    { 
        using var httpClient = _httpFactory.CreateClient();

        var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<LandDTO>>($"api/landen", httpClient);
        if (result.IsSuccessful)
        {
            Landen = result.Value;
        }
        else
        {
            Error = result.Error;
        }
    }
}
