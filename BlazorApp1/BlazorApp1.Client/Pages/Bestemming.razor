@using Reizen.Domain.DTOs
@using System.Net
@using Microsoft.AspNetCore.Authorization

@page "/bestemmingen/{Bestemmingscode}"

@inject IHttpClientFactory _httpFactory
@inject ILogger<Bestemming> _logger;

@attribute [Authorize]

@if (reizen != null)
{
    <h3>@reizen.FirstOrDefault()?.Bestemming.Plaats</h3>
    <img src="/bestemmingen/@(reizen.FirstOrDefault()?.Bestemming.Plaats).jpg"/>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Vertrek</th><th scope="col">Prijs/person</th><th scope="col">Aantal dagen</th><th scope="col">Boeken</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reis in reizen)
            {
                <tr>
                    <td>@reis.Vertrek.ToString()</td><td>@reis.PrijsPerPersoon</td><td>@reis.AantalDagen</td><td><a href="/reisKiezen/@reis.Id">Boeken</a></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    @if (Error is null)
    {
        <p>Waiting for data...</p>
    }
    else 
    { 
        <p>@Error</p>
    }
}

@code 
{
    [Parameter]
    public string Bestemmingscode { get; init; }

    private IEnumerable<ReisDTO>? reizen;

    private string Error;

    protected override async Task OnInitializedAsync()
    {
        if (Bestemmingscode != null)
        {
            try
            {
                using var httpClient = _httpFactory.CreateClient();
                reizen = await httpClient.GetFromJsonAsync<IEnumerable<ReisDTO>>($"api/reizen/{Bestemmingscode}");
            }
            catch (HttpRequestException ex) 
            {
                if(ex.StatusCode == HttpStatusCode.NotFound)
                {
                    Error = "No trips available";
                }
            }
        }
    }
}
