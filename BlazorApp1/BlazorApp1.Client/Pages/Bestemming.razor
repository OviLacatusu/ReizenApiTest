@using Reizen.Domain.DTOs
@using System.Net
@using Microsoft.AspNetCore.Authorization

@page "/bestemmingen/{Bestemmingscode}"

@inject IHttpClientFactory _httpFactory
@inject ILogger<Bestemming> _logger;

@attribute [Authorize]

@if (reizen != null)
{
    <h3>@reizen.FirstOrDefault()?.Bestemming.Plaats</h3>
    <img src="/bestemmingen/@(reizen.FirstOrDefault()?.Bestemming.Plaats).jpg"/>
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Vertrek</th><th scope="col">Prijs/person</th><th scope="col">Aantal dagen</th><th scope="col">Boeken</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var reis in reizen)
            {
                <tr>
                    <td>@reis.Vertrek.ToString()</td><td>@reis.PrijsPerPersoon</td><td>@reis.AantalDagen</td><td><a href="/reisKiezen/@reis.Id">Boeken</a></td>
                </tr>
            }
        </tbody>
    </table>
}
@if(Error != null)
{
    <div class="alert alert-danger">@Error</div>
}

@code 
{
    [Parameter]
    public string Bestemmingscode { get; init; }

    private IEnumerable<ReisDTO>? reizen;

    private string Error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(Bestemmingscode))
        {
            using var httpClient = _httpFactory.CreateClient();
            var result = await httpClient.GetAsync($"api/reizen/{Bestemmingscode}");

            if (result.IsSuccessStatusCode)
            {
                reizen = await result.Content.ReadFromJsonAsync<IEnumerable<ReisDTO>>();
            }
            else
            {
                var content = await result.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
                else
                {
                    Error = "Something went wrong.";
                }
            }
            
        }
    }
}
