@using Reizen.CommonClasses.DTOs
@using Microsoft.AspNetCore.Authorization

@page "/{NaamLand}/bestemmingen"

@inject IHttpClientFactory _httpFactory

@* @attribute [Authorize] *@
<div class="container">
    <h2>Choose the destination:</h2>

    <img src="/vlaggen/@(NaamLand).png" />

    @if (Bestemmingen != null)
    {
        <ul>
            @foreach (var bestemming in Bestemmingen)
            {
                <li>
                    <div class="row">
                        <div class="col col-md-2">
                            <a href="/@bestemming.Code/reizen">@bestemming.Plaats</a>
                        </div>
                        <div class="col col-md-3">
                            @if (reizenNaarBestemming?[bestemming.Code]?.Count() > 0) 
                            {
                                <p> - @reizenNaarBestemming?[bestemming.Code]?.Count() available trips</p>
                            }
                            else 
                            {
                                <p> - no available trips</p>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Waiting for data...</p>
    }
    @if (!String.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
</div>

@code {
    [Parameter]
    public string? NaamLand { get; set; }

    private string? Error { get; set; }

    private IEnumerable<BestemmingDTO>? Bestemmingen;

    private IDictionary<string,IEnumerable<ReisDTO>>? reizenNaarBestemming = new Dictionary<string,IEnumerable<ReisDTO>>();

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(NaamLand))
        {
            using var httpClient = _httpFactory.CreateClient();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<BestemmingDTO>>($"api/bestemmingen/{NaamLand}", httpClient);
            if (result.IsSuccessful)
            {
                Bestemmingen = result.Value;
                await GetAvailableTripsForEachDestination();
            }
            else
            {
                Error = result.Error;
            }
        }
    }
    private async Task GetAvailableTripsForEachDestination()
    {
        foreach (var bestemming in Bestemmingen)
        {
            using var httpClient = _httpFactory.CreateClient();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<ReisDTO>>($"api/reizen/{bestemming.Code}", httpClient);
            if (result.IsSuccessful)
            {
                reizenNaarBestemming.Add(bestemming.Code, result.Value);
            }
            else
            {
                reizenNaarBestemming.Add(bestemming.Code, null);
                //Error += result.Error;
            }
        }
    }
}
