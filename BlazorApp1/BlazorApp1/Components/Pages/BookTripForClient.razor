
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json;
@using Reizen.CommonClasses.DTOs
@using System.Text

@page "/book/trip/{TripId:int}/client/{ClientId:int}"

@inject ILogger<BookTripForClient> _logger;
@inject IHttpClientFactory _httpFactory
@inject IMemoryCache _storage;

@rendermode InteractiveServer

<div class="container">
    @if (Trip is not null && Client is not null)
    {
        <h2>Trip</h2>
        <div class="row">

            <div class="col-lg-3">   
                <span style="font-weight:bold;">Destination</span>
            </div>
            <div class="col-lg-4">
                <span>@Trip.Destination.PlaceName</span>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-3">
                <span style="font-weight:bold;">Departure</span>
            </div>
            <div class="col-lg-4"> 
                <span>@Trip.DateOfDeparture</span>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-3">
                <span style="font-weight:bold;">Number of days</span>
            </div>
            <div class="col-lg-4">
                <span>@Trip.NumberOfDays</span>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-3">
                <span style="font-weight:bold;">Price per person</span>
            </div>
            <div class="col-lg-4">
                <span>@Trip.PricePerPerson</span>
            </div>
        </div>

        <h2>Client</h2>
        <div class="row">
            <div class="col-lg-3">
                <span>@($"{Client.FirstName} {Client.FamilyName}")</span>
            </div>
            <div class="col-lg-4">
                <span>@Client.Address, @Client.Residence.PostalCode @Client.Residence.Name</span>
            </div>
        </div>
        <h2>Booking</h2>
        <EditForm Model="@Model" OnValidSubmit="@(() => Modal.Open())">
            <DataAnnotationsValidator/>
            <div class="row">
                <div class="col-lg-3">
                    <span style="font-weight:bold;">Number of adults</span>
                </div>
                <div class="col-lg-2">
                    <InputNumber class="form-control" @bind-Value:get="(Model.NumberOfAdults)" @bind-Value:set="((value) => Model.NumberOfAdults = value)" id="numberAdults"></InputNumber>
                    <label for="numberAdults"></label>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3">
                        <span style="font-weight:bold;">Number of kids</span>
                </div>
                <div class="col-lg-2">
                    <InputNumber class="form-control" @bind-Value:get="(Model.NumberOfMinors)" @bind-Value:set="((value) => Model.NumberOfMinors = value)" id="numberMinors"></InputNumber>
                    <label for="numberMinors"></label>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-3">
                        <span style="font-weight:bold;">Cancellation insurance</span>
                </div>
                <div class="col-lg-4">
                    <InputCheckbox id="annulatieV" @bind-Value="@Model.HasCancellationInsurance"></InputCheckbox>
                </div>
            </div>
            <div class="row"><ValidationSummary/></div>

            <div class="row">
                <div class="col-lg-3">

                </div>
                <div class="col-lg-2">
                    <button type="submit" class="btn btn-primary" data-toggle="modal">Book trip</button>
                </div>

                <BootstrapModalComponent @ref="Modal" Message="Are you sure you want to book this trip?" Header="Confirmation" Callback="@(async () => { await AddNewBooking(); Modal.Close(); })"></BootstrapModalComponent>
            </div>
        </EditForm>
    } 
    else 
    {
        <p>Waiting for data</p>
    }
    @if (!String.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
    else if (IsSuccessful)
    {
        <div class="alert alert-success">Booking successful</div>
    }
</div>

@code 
{
    private BootstrapModalComponent Modal { get; set; }

    [Parameter]
    public int TripId { get; init; }

    [Parameter]
    public int ClientId { get; init; }

    private ClientDTO? Client { get; set; }

    private TripDTO? Trip { get; set; }

    private BookTripForClientModel model;
    private BookTripForClientModel Model 
    { 
        get 
        {
            return model??=_storage.Get<BookTripForClientModel>("modelBookTrip") ?? new BookTripForClientModel { NumberOfMinors = 0, NumberOfAdults = 0, HasCancellationInsurance = false };
        } 
        set
        {
            if (value != null) 
            {
                model = value;
                _storage.Set<BookTripForClientModel>("modelBookTrip", model);
            }
        } 
    }

    private string Error { get; set; }

    private bool IsSuccessful { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (TripId > 0) 
        {
            var httpClient = _httpFactory.CreateClient();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<TripDTO>($"/api/trips/{TripId}", httpClient);
            if (result.IsSuccessful)
            {
                Trip = result.Value;
            }
            else
            {
                Error = result.Error;
            }
        }
        if (ClientId > 0 && Trip != null)
        {   
            using (var httpClient = _httpFactory.CreateClient()) 
            {
                var result = await HelperRequest.SendGetRequestAndParseJsonAsync<ClientDTO>($"/api/clients/{ClientId}", httpClient);
                if (result.IsSuccessful)
                {
                    Client = result.Value;
                }
                else
                {
                    Error = result.Error;
                }
            }
        }
    }

    private async Task AddNewBooking() 
    {
        var booking = new BookingDTO
            {
                NumberOfAdults = Model.NumberOfAdults,
                NumberOfMinors = Model.NumberOfMinors,
                HasCancellationInsurance = Model.HasCancellationInsurance,
                BookedOnDate = DateOnly.FromDateTime(DateTime.Today),
                TripId = TripId,
                ClientId = ClientId
            };

        using (var client = _httpFactory.CreateClient()) 
        { 
            var httpContent = new StringContent(JsonSerializer.Serialize<BookingDTO>(booking), Encoding.UTF8, "application/json");
            // POST request
            var response = await client.PostAsync($"/api/bookings", httpContent);

            if (!response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
            }
            else 
            {
                IsSuccessful = true;
            }
        }
    }
}
