@using Reizen.CommonClasses.DTOs
@using Microsoft.AspNetCore.Authorization

@page "/{NameCountry}/Destinations"

@inject IHttpClientFactory _httpFactory
@inject ILogger<DestinationsOfCountry> _logger;

<div class="container">
    <h2>Choose the destination:</h2>

    <img src="/vlaggen/@(NameCountry).png" />

    @if (destinations?.Count() > 0)
    {
        <ul>
            @foreach (var destination in destinations)
            {
                <li>
                    <div class="row">
                        <div class="col col-md-2">
                            <a href="/@destination.Code/trips">@destination.PlaceName</a>
                        </div>
                        <div class="col col-md-3">
                            @if (tripsToDestination?[destination.Code]?.Count() > 0) 
                            {
                                <span> - @(tripsToDestination[destination.Code].Count()) available trips</span>
                            }
                            else 
                            {
                                <span> - no available trips</span>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Waiting for data...</p>
    }
    @if (!String.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
</div>

@code {
    [Parameter]
    public string? NameCountry { get; set; }

    private string? Error { get; set; } = String.Empty;

    private IEnumerable<DestinationDTO>? destinations;

    private Dictionary<string,IEnumerable<TripDTO>>? tripsToDestination = new ();

    protected override async Task OnInitializedAsync()
    {
        if (String.IsNullOrEmpty (NameCountry))
        {
            Error = "Invalid country name";
            return;
        }
        try
        {
            using var httpClient = _httpFactory.CreateClient ();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<DestinationDTO>> ($"api/destinations/{NameCountry}", httpClient);
            if (result.IsSuccessful)
            {
                destinations = result.Value;
                await GetAvailableTripsForEachDestinationAsync ();
            }
            else
            {
                Error = result.Error;
                _logger.LogError ($"Failed to initialize component. {Error}");
            }
        }
        catch (Exception ex)
        {
            Error = $"An error occurred while initializing component.";
            _logger.LogError ($"Error in OnInitializedAsync. {Error}");
        }
    }
    private async Task GetAvailableTripsForEachDestinationAsync ()
    {
        if (destinations?.Count () > 0)
        {
            tripsToDestination.Clear ();
            foreach (var destination in destinations)
            {
                using var httpClient = _httpFactory.CreateClient ();

                var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<TripDTO>> ($"api/Trips/{destination.Code}", httpClient);
                if (result.IsSuccessful)
                {
                    tripsToDestination.Add (destination.Code, result.Value ?? Enumerable.Empty<TripDTO> ());
                }
                else
                {
                    tripsToDestination.Add (destination.Code, Enumerable.Empty<TripDTO> ());
                    Error = result.Error;
                    _logger.LogWarning ($"Failed to get trips for destination {destination.PlaceName}: {Error}");
                }
            }
        }
    }
}
