@using Microsoft.AspNetCore.Http
@using System.Web
@using Newtonsoft.Json
@using global::GoogleAccess.Domain.Models
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication
@using System.Text.Json
@using Models
@using Microsoft.AspNetCore.Identity;
@using Data
@using Google.Apis.Gmail.v1.Data
@using BlazorApp1.Client.Components

@page "/GoogleAccess"

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject IJSRuntime JSRuntime;
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<GoogleStuff> _logger;
@inject IHttpClientFactory _factory;
@inject NavigationManager _navManager;
@inject AuthenticationStateProvider _authStateProvider;
@inject IHttpContextAccessor _httpContextAccessor;
@inject UserManager<ApplicationUser> UserManager;
@inject Blazored.SessionStorage.ISessionStorageService _storage;
@inject IOptionsSnapshot<ConfigOptions> _config;
@inject CustomAuthDelegatingHandler _oAuthHttpHandler;

<div class="container">
    <AuthorizeView>

        @if (IsLoggedInWithGoogle(_httpContextAccessor.HttpContext?.User))
        {
            <CollapsingElement Title="Google Photos API">
                <ElementBody>
                    <div class="buttonPickerDiv">
                        <div class="col-md-2">
                            @*Closing the picking session window before picking the fotos will have the polling loop run indefinately*@
                            <button @onclick="OpenTabAndPollSession">Open Picker Session</button>
                        </div>
                    </div>

                    @if (MediaItems?.MediaItems?.Count() > 0)
                    {
                        foreach (var item in MediaItems.MediaItems)
                        {
                            <div class="row">
                                <div class="col-md-2">

                                    <button class="btn btn-link" @onclick="@(async () => await DownloadFoto(item.MediaFile))">@item.MediaFile?.Filename</button>
                                </div>
                            </div>
                        }
                        <div class="buttonDownloadAllDiv">
                            <div class="col-md-2">
                                <button @onclick="(async () => await DownloadFiles(MediaItems.MediaItems))">Download files</button>

                            </div>
                        </div>
                    } 
                </ElementBody>
            </CollapsingElement>

            <CollapsingElement Title="Google Gmail API">
                <ElementBody>
                    @if (IsSuccessfull)
                    {
                        <div class="alert alert-success">Message deleted successfully</div>
                    }
                    @if (Messages?.Count() > 0) 
                    {
                        @* TO DO: Find a beter way of passing the message ID to the ModalComponent Callback *@
                        <ModalComponent @ref="Modal" Message="Are you sure you want to delete? This will permanently delete the message!" Header="Delete message" Callback="@( async () => { if( !String.IsNullOrEmpty(SelectedMessageId) ){ await DeleteMessage (SelectedMessageId); Modal.Close(); }})"></ModalComponent>
                        foreach (var item in Messages)
                        {
                            <div class="row">
                                <div class="col-md-3">
                                    <p>@item?.Payload?.Headers?.Where(x => x.Name == "From").First()?.Value</p>
                                </div>
                                <div class="col-lg-6">
                                    <button class="btn btn-link">@item?.Payload?.Headers?.Where(x => x.Name == "Subject").FirstOrDefault()?.Value</button>
                                </div>
                                <div class="col-md-2">
                                    <button class="btn btn-link" @onclick="@( async () => { Modal.Open(); SelectedMessageId = item?.Id; })">Delete mail</button> 
                                </div>
                            </div>
                        }
                    } 
                    else if (Messages == null)
                    {
                        <div>Fetching messages...</div>
                    }
                </ElementBody>
            </CollapsingElement>
        } 
    </AuthorizeView>
    @if (!String.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@((MarkupString)Error) </div>
    }
</div>

@* Suggested way of downloading files < 250 MB in size using JSInterop *@
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);

    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    };
</script>

<style>
    .row:hover{
    background-color: lightgray;
    }
</style>

@code
{
    [Parameter]
    public PickingSession? SessionData { get; set; }

    [Parameter]
    public string? AccessToken { get; set; }

    private ModalComponent Modal { get; set; }

    private ExternalLoginInfo? ExternalLoginInfo;

    private string? SelectedMessageId { get; set; }

    private string? Error { get; set; }

    private bool IsSuccessfull = false;

    private CancellationToken token = new();

    private GPhotosDetailsFiles? MediaItems { get; set; }

    private IEnumerable<Message>? Messages { get; set; }

    private ConfigOptions Options => _config.Value;

    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation("-- OnInitialized called --");
        var user = _httpContextAccessor.HttpContext?.User;

        if(IsLoggedInWithGoogle(user))
        {
            await GetPickerSession();
            await GetMailMessages();
        }
        else 
        {
            Error = "Not authorized. Please log in with GoogleOpenIdConnect  <a href='/Account/Login'>Here</a>";
        }
    }

    private bool IsLoggedInWithGoogle(ClaimsPrincipal? user) 
    { 
       return (user?.FindFirst(ClaimTypes.AuthenticationMethod)?.Value?.Contains("google", StringComparison.OrdinalIgnoreCase) == true) ? true : false ;
    }

    protected override void OnParametersSet()
    {
        _logger.LogInformation("++ OnParametersSet called ++");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _logger.LogInformation($"** OnAfterRender called with firstrender = {firstRender} **");
    }

    private async Task GetMailMessages()
    {
        var httpClient = new HttpClient(_oAuthHttpHandler);
        httpClient.BaseAddress = new Uri(Options.ApiUrl);

        var response = await httpClient.GetAsync("/api/GoogleAccess/GetMessages");
        if (response.IsSuccessStatusCode)
        {
            Messages = JsonConvert.DeserializeObject<IList<Message>>(await response.Content.ReadAsStringAsync());
        }
        else
        {
            var content = await response.Content.ReadAsStringAsync();
            if (!String.IsNullOrEmpty(content))
            {
                Error = content;
            }
            else
            {
                Error = "Something went wrong.";
            }
        }
    }

    // Requests a Picker session
    private async Task GetPickerSession()
    {
        var httpClient = new HttpClient(_oAuthHttpHandler);
        httpClient.BaseAddress = new Uri(Options.ApiUrl);

        var result = await httpClient.GetAsync("/api/GoogleAccess/GetPickerLink");
        if (result.IsSuccessStatusCode)
        {
            SessionData = await System.Text.Json.JsonSerializer.DeserializeAsync<PickingSession>(await result.Content?.ReadAsStreamAsync());
        }
        else
        {
            var content = await result.Content.ReadAsStringAsync();
            if (!String.IsNullOrEmpty(content))
            {
                Error = content;
            }
            else
            {
                Error = "Something went wrong.";
            }
        }
    }

    // Opens the picker session in a new tab and starts a Web API call that polls the session state
    private async Task OpenTabAndPollSession()
    {
        if (SessionData is not null)
        {
            await JSRuntime.InvokeVoidAsync("open", $"{SessionData.pickerUri}", "_blank");
            await PollRequestPickerApi(SessionData.id);
        }
    }

    // Polls the Picker session and returns the details of the picked media files
    private async Task PollRequestPickerApi(string sessionId)
    {
        _logger.LogInformation($"Running PollRequest at {DateTime.UtcNow.ToShortTimeString()}");

        using (var client = new HttpClient(_oAuthHttpHandler))
        {
            client.BaseAddress = new Uri(Options.ApiUrl);
            var response = await client.GetAsync($"api/GoogleAccess/GetPhotosWithPicker/{sessionId}");
            if (response.IsSuccessStatusCode)
            {
                MediaItems = await System.Text.Json.JsonSerializer.DeserializeAsync<GPhotosDetailsFiles>(await response.Content?.ReadAsStreamAsync());
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
                else
                {
                    Error = "Something went wrong.";
                };
            }
        }
        _logger.LogInformation($"Exiting PollRequest at {DateTime.UtcNow.ToShortTimeString()}");
        StateHasChanged();
    }

    private async Task DownloadFiles(IEnumerable<PickedMediaItem> fileDetails) 
    {
        foreach (var file in fileDetails) 
        {
            await DownloadFoto(file.MediaFile);
        }
    }

    // Downloads file from data stream. Tested only with photos
    private async Task DownloadFoto(MediaFile fileDetails) 
    { 
        _logger.LogInformation($"Running DownloadFoto at {DateTime.UtcNow.ToShortTimeString()}");
        using (var client = new HttpClient(_oAuthHttpHandler))
            {
            client.BaseAddress = new Uri(Options.ApiUrl);

            var response = await client.GetAsync($"api/GoogleAccess/downloadfoto/{HttpUtility.UrlEncode(fileDetails.BaseUrl)}/{HttpUtility.UrlEncode(fileDetails.MimeType)}");           //{HttpUtility.UrlEncode(url)}");
            if (response.IsSuccessStatusCode) 
            {
                var stream = await response.Content.ReadAsStreamAsync();
                using var streamRef = new DotNetStreamReference(stream: stream);

                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"{fileDetails.Filename}", streamRef);
            }
            else
            {
                Error = "Failed to download file.";
            }
        }
    }

    private async Task DeleteMessage(string messageId) 
    {
        _logger.LogInformation($"Running DeleteMail - deleting mail message with ID: {messageId}");
        using (var client = new HttpClient(_oAuthHttpHandler))
            {  
                client.BaseAddress = new Uri(Options.ApiUrl);

                var result = await client.PostAsJsonAsync($"/api/GoogleAccess/deletemessage", messageId);

                if (result.IsSuccessStatusCode)
                {
                    IsSuccessfull = true;
                    await GetMailMessages();
                    StateHasChanged();
                }
                else 
                {
                    Error = await result.Content.ReadAsStringAsync();
                }
            }
    }
}