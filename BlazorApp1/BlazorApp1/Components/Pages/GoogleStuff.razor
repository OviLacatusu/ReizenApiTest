@using Microsoft.AspNetCore.Http
@using System.Web
@using global::GoogleAccess.Domain.Models
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authentication
@using System.Text.Json
@using Models
@using Microsoft.AspNetCore.Identity;
@using Data

@page "/GoogleAccess"

@rendermode @(new InteractiveServerRenderMode(prerender:false))

@inject IJSRuntime JSRuntime;
@inject ILogger<GoogleStuff> _logger;
@inject IHttpClientFactory _factory;
@inject NavigationManager _navManager;
@inject AuthenticationStateProvider _authStateProvider;
@inject IHttpContextAccessor _httpContextAccessor;
@inject UserManager<ApplicationUser> UserManager;
@inject Blazored.SessionStorage.ISessionStorageService _storage;


<AuthorizeView>
    <div class="container">
        <button @onclick="OpenTabAndPollSession">Pick Photos</button>
        
        @if(MediaItems is not null && MediaItems.mediaItems.Count() > 0)
        {
            foreach (var item in MediaItems.mediaItems)
            {
            <div class="row">
                <div class="col-lg-3">
                @* <a href="" @onclick="@(async () => await DownloadFoto($"{item.id}=w{item.mediaFile.mediaFileMetadata.width}-h{item.mediaFile.mediaFileMetadata.height}=d"))" >@item.mediaFile.filename</a> *@
                <button class="btn btn-link" @onclick="@(async () => await DownloadFoto(item.mediaFile))">@item.mediaFile.filename</button>
                </div>
                </div>
            }
            /*var last = MediaItems.mediaItems.Last();*/
            <div class="row">
                <div class="col-md-1">
                    <button @onclick="(async ()=> await DownloadFiles(MediaItems.mediaItems))">Download files</button>

                </div>
            </div>
        }
        </div>

</AuthorizeView>

@if (!String.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger">@((MarkupString)Error) </div>
}
@* Suggested way of downloading files < 250 MB in size using JSInterop *@
<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);

    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    };
</script>
@code
{
    private string? Error { get; set; }

    private CancellationToken token = new();

    [Parameter]
    public PickingSession? SessionData { get; set; }

    [Parameter]
    public string? AccessToken { get; set; }

    public DetailsFiles? MediaItems { get; set; }

    // Checking wether user is authenticated. If so we assume there is a access token to request a Picker session
    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation("-- OnInitialized called --");
        if (_httpContextAccessor?.HttpContext?.User?.Identity?.IsAuthenticated == true)
        {
            await GetPickerSession();
        }
        else 
        {
            Error = "Not authorized. Please log in with Google OpenId Connect<a href='/Account/Login'>Here</a>";
        }
    }

    protected override void OnParametersSet()
    {
        _logger.LogInformation("++ OnParametersSet called ++");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        _logger.LogInformation($"** OnAfterRender called with firstrender = {firstRender} **");
    }

    // Requesting the Picker session
    private async Task GetPickerSession()
    {
        var httpClient = new HttpClient(new CustomAuthDelegatingHandler(_httpContextAccessor, UserManager));
        httpClient.BaseAddress = new Uri(ConfigData.httpClientURI);

        var result = await httpClient.GetAsync("/api/Test/GetPickerLink");
        if (result.IsSuccessStatusCode)
        {
            SessionData = await JsonSerializer.DeserializeAsync<PickingSession>(await result.Content?.ReadAsStreamAsync());
        }
        else
        {
            var content = await result.Content.ReadAsStringAsync();
            if (!String.IsNullOrEmpty(content))
            {
                Error = content;
            }
            else
            {
                Error = "Something went wrong.";
            }
        }
    }
    // method that opens the picker session in a new tab and starts a Web API call for polling the session
    public async Task OpenTabAndPollSession()
    {
        if (SessionData is not null)
        {
            await JSRuntime.InvokeVoidAsync("open", $"{SessionData.pickerUri}", "_blank");
            await PollRequest(SessionData.id);
        }
        //await DownloadFoto(MediaItems.mediaItems.First().mediaFile.baseUrl);
    }

    // Calling the API method that polls the request and returns the media files details
    private async Task PollRequest(string id)
    {
        _logger.LogInformation($"Running PollRequest at {DateTime.UtcNow.ToShortTimeString()}");

        using (var client = new HttpClient(new CustomAuthDelegatingHandler(_httpContextAccessor, UserManager)))
        {
            client.BaseAddress = new Uri(ConfigData.httpClientURI);
            var response = await client.GetAsync($"api/Test/GetPhotosWithPicker/{id}");
            if (response.IsSuccessStatusCode)
            {
                MediaItems = await JsonSerializer.DeserializeAsync<DetailsFiles>(await response.Content?.ReadAsStreamAsync());
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                if (!String.IsNullOrEmpty(content))
                {
                    Error = content;
                }
                else
                {
                    Error = "Something went wrong.";
                };
            }
        }
        _logger.LogInformation($"Exiting PollRequest at {DateTime.UtcNow.ToShortTimeString()}");
        StateHasChanged();
    }
    private async Task DownloadFiles(IEnumerable<PickedMediaItem> fileDetails) 
    {
        foreach (var file in fileDetails) 
        {
            await DownloadFoto(file.mediaFile);
        }
    }
    // Tested only with fotos for now
    private async Task DownloadFoto(MediaFile fileDetails) 
    { 
        _logger.LogInformation($"Running DownloadFoto at {DateTime.UtcNow.ToShortTimeString()}");
        using (var client = new HttpClient(new CustomAuthDelegatingHandler(_httpContextAccessor, UserManager))) {
            client.BaseAddress = new Uri(ConfigData.httpClientURI);

            var response = await client.GetAsync($"api/test/downloadfoto/{HttpUtility.UrlEncode(fileDetails.baseUrl)}/{HttpUtility.UrlEncode(fileDetails.mimeType)}");           //{HttpUtility.UrlEncode(url)}");
            if (response.IsSuccessStatusCode) 
            {
                var stream = await response.Content.ReadAsStreamAsync();
                using var streamRef = new DotNetStreamReference(stream: stream);

                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", $"{fileDetails.filename}", streamRef);
            }
            else
            {
                Error = "Failed to download file.";
            }
        }
    }
}