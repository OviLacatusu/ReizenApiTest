@using BlazorApp1.Components.Account
@using Microsoft.AspNetCore.Authentication

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Models

@page "/"

@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor _context;
@inject AuthenticationStateProvider _auth
@inject ILogger<Home> _logger;

@rendermode InteractiveServer

<PageTitle>Home </PageTitle>
<div class="container">
<h1>Hello! </h1>
Welcome to my Blazor app. Here you'll find some projects I am currently working on.
<ul>
    <li>Trips is a somewhat simple Web API project where I am trying to implement CQRS and event streaming - currently only the CQRS part is implemented.</li>
    <li>Google access is a Google API project. You'll have to authenticate with Google and authorize the application in order access this functionality. </li>
    <li>Things that will be added (not necessarily in this order):
        <ul>
            <li>
                Role based authorization
            </li>
            <li>
                Event streaming
            </li>
            
            <li>
                Domain layer
            </li>
            <li>
                Some more Google API functionality
            </li>
            <li>
                Form validation
            </li>
            <li>
                OAuth 2.0 access token refresh
            </li>
            <li>
                Loging out
            </li>
        </ul>
    </li>
        <li> 
            <a href="https://github.com/OviLacatusu/ReizenApiTest">Github repository</a>
        </li>
    </ul>
<AuthorizeView > 
    @if (context.User?.Identity?.IsAuthenticated == true)  
    { 
        @if(AccessToken != null)
        {
            <p>Access token: @AccessToken </p>
        }
    }
</AuthorizeView> 
</div>
@code{

    private string AccessToken { get; set; }

    private async Task GetAccessToken() 
    { 
        var current = await UserManager.GetUserAsync(_context.HttpContext.User);
        var token = await UserManager.GetAuthenticationTokenAsync(current, "GoogleOpenIdConnect", "access_token");
    }
    protected override async Task OnInitializedAsync() 
    {
        if(_context.HttpContext?.User?.Identity?.IsAuthenticated == true)
            await GetAccessToken();
    }

}