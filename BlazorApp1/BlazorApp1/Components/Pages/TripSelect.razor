@using Microsoft.Extensions.Caching.Memory
@using Reizen.CommonClasses
@using BlazorApp1.Components.BootstrapComponents

@page "/tripSelect"

@rendermode InteractiveServer

@inject IHttpClientFactory _httpFactory
@inject ILogger<ListOfContinents> _logger
@inject IMemoryCache _storage;

<div class="container">
    <div class="row">

        <div class="col col-md-4">
            <BootstrapDropdownWithCallback Options="optionsContinents" Label="Continent" @bind-OptionSelected="SelectedContinent" AdditionalCallback="ContinentChangeCallback"/>
        </div>        
        <div class="col col-md-4">
            <BootstrapDropdownWithCallback Options="optionsCountries" Label="Country" @bind-OptionSelected="SelectedCountry" AdditionalCallback="CountryChangeCallback" />
        </div>
    </div>
    @if (countryDestinations?.Count() > 0) {
        <img src="/vlaggen/@(SelectedCountry).png" />
        <div class="row">
            <h4>Available destinations:</h4>
        </div>
        <ul>
            @foreach (var destination in countryDestinations)
            {
                <li>
                    <div class="row">
                        <div class="col col-md-4">
                            <a href="/@destination.Code/trips">@destination.PlaceName</a>
                        </div>
                        <div class="col col-md-4">
                            @if (tripsToDestination?.ContainsKey (destination.Code) == true && tripsToDestination?[destination.Code]?.Count () > 0)
                            {
                                <span> - @(tripsToDestination[destination.Code].Count()) available trips</span>
                            }
                            else
                            {
                                <span> - no available trips</span>
                            }
                        </div>
                    </div>
                </li>
            }
        </ul>
    }        
    else
    {
        <p>Waiting for data...</p>
    }
</div>

@code {
    private Dictionary<string, int?> optionsContinents = new();

    private Dictionary<string, int?> optionsCountries = new();

    private List<DestinationDTO>? countryDestinations = new List<DestinationDTO>();

    private Dictionary<string, IEnumerable<TripDTO>> tripsToDestination = new();

    // Storing only selected continent and selected country serverside
    private string? selectedCountry;
    private string? SelectedCountry 
    { 
        get 
        {
            return selectedCountry ??= _storage.Get<string>("selectedCountry");
        }
        set 
        {
            if (value != null)
            {
                selectedCountry = value;
                _storage.Set<string>("selectedCountry", value);
            }
        } 
    }

    private string? selectedContinent;
    private string? SelectedContinent
    {
        get
        {
            return selectedContinent ??= _storage.Get<string>("selectedContinent");
        }
        set
        {
            if (value != null)
            {
                selectedContinent = value;
                _storage.Set<string>("selectedContinent", value);
            }
        }
    }

    private string Error { get; set; } = String.Empty;

    private async Task ContinentChangeCallback(string optionContinent) 
    {
        try
        {
            await PopulateCountriesDropdownAsync (optionContinent);
            if (optionsCountries.Any ())
            {
                SelectedCountry = optionsCountries.Keys.First ();
                await GetCountryDestinationsAsync (SelectedCountry);
            }
        }
        catch (Exception ex)
        {
            Error = $"Error loading countries: {ex.Message}";
            _logger.LogError (ex, "Error in ContinentChangeCallback");
        }
    }

    private async Task CountryChangeCallback(string optionCountry) 
    {
        try
        {
            await GetCountryDestinationsAsync (optionCountry);
        }
        catch (Exception ex) 
        {
            Error = $"Error loading destinations.";
            _logger.LogError (ex, "Error in CountryChangeCallback");
        }
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            await PopulateContinentsDropdownAsync ();
            if (SelectedContinent == null && optionsContinents.Any())
            {
                SelectedContinent = optionsContinents.Keys.First ();
            }
            if (SelectedContinent != null)
            {
                await PopulateCountriesDropdownAsync (SelectedContinent);
                if (SelectedCountry == null && optionsCountries.Any())
                {
                    SelectedCountry = optionsCountries.Keys.First ();
                }
                if (SelectedCountry != null)
                {
                    await GetCountryDestinationsAsync (SelectedCountry);
                }
            }
        }
        catch (Exception ex)
        {
            Error = $"Error initializing component.";
            _logger.LogError (ex, "Error in OnInitializedAsync");
        }

    }

    private async Task<Result<T?>> GetResultFromApiRequestAsync<T>(string apiRequestUrl) 
    {
        using var client = _httpFactory.CreateClient();

        var result = await HelperRequest.SendGetRequestAndParseJsonAsync<T>(apiRequestUrl, client);

        return result;
    }

    private async Task PopulateContinentsDropdownAsync() 
    {
        var result = await GetResultFromApiRequestAsync<IEnumerable<ContinentDTO>>("/api/continents");
        if (result.IsSuccessful)
        {
            optionsContinents.Clear();
            result.Value?.ToList().ForEach(el => { optionsContinents.Add(el.Name, el.Id); });
        }
        else 
        {
            Error = result.Error;
            _logger.LogError($"Failed to populate continents: {Error}");
        }
    }

    private async Task PopulateCountriesDropdownAsync(string continent) 
    {
        var result = await GetResultFromApiRequestAsync<IEnumerable<CountryDTO>>($"/api/countries/{continent}");
        if (result.IsSuccessful)
        {
            optionsCountries.Clear();
            result.Value?.ToList().ForEach(el => {  optionsCountries.Add(el.Name, el.Id); });
        }
        else 
        {
            Error = result.Error;
            _logger.LogError ($"Failed to populate countries: {Error}");
        }
    }

    private async Task GetCountryDestinationsAsync(string countryName) 
    { 
        if (!String.IsNullOrEmpty(countryName))
        {
            using var httpClient = _httpFactory.CreateClient();

            var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<DestinationDTO>>($"api/Destinations/{countryName}", httpClient);
            if (result.IsSuccessful)
            {
                countryDestinations = result.Value?.ToList();
                await GetAvailableTripsForEachDestinationAsync();
            }
            else
            {
                Error = result.Error;
                _logger.LogError ($"Failed to get destinations for country {countryName}");
            }
        }
    }

    private async Task GetAvailableTripsForEachDestinationAsync()
    {
        if (countryDestinations?.Count() > 0)
        {
            tripsToDestination.Clear();
            foreach (var destination in countryDestinations)
            {
                using var httpClient = _httpFactory.CreateClient();

                var result = await HelperRequest.SendGetRequestAndParseJsonAsync<IEnumerable<TripDTO>>($"api/Trips/{destination.Code}", httpClient);
                if (result.IsSuccessful)
                {
                    tripsToDestination.Add(destination.Code, result.Value ?? Enumerable.Empty<TripDTO>());
                }
                else
                {
                    tripsToDestination.Add(destination.Code, Enumerable.Empty<TripDTO>());
                    Error = result.Error;
                    _logger.LogWarning($"Failed to get trips for destination {destination.PlaceName}: {Error}");
                }
            }
        }
    }
}
