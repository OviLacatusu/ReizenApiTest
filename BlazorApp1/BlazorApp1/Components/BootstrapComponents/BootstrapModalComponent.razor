
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @Header
                </h5>

            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn @ButtonTypeDescription" @onclick="@(async () => { await OnClickCallback.InvokeAsync(); Close(); })">Yes</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(() => Close())">Close</button>
            </div>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public string Message { get; set; }

    [Parameter]
    public string Header { get; set; }

    [Parameter]
    public EventCallback OnClickCallback { get; set; }
    
    [Parameter]
    public ButtonTypes TypeButton {
        get; set;
    }
    
    public enum ButtonTypes { PRIMARY, SECONDARY, DANGER  }

    private readonly Dictionary<ButtonTypes, String> ButtonTypeDescriptions = new Dictionary<ButtonTypes, string>
    {
        {ButtonTypes.PRIMARY, "btn-primary"},
        {ButtonTypes.DANGER, "btn-danger" },
        {ButtonTypes.SECONDARY, "btn-secondary"}
    };

    private string ButtonTypeDescription => ButtonTypeDescriptions[TypeButton];

    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}